2018届研究生硕士学位论文               
分类号：                               学校代码：  10269   
密  级：                                学    号：51151500126



East China Normal University
硕士学位论文
MASTER’S  DISSERTATION

论文题目：
基于改良SMC算法以及神经网络的带参数马尔科夫模型验证方法研究

院    系：  计算机科学与软件工程学院  
专    业：          软件工程          
研究方向：     高可信计算理论与技术   
指导教师：        张敏   副教授     
学位申请人：          严佳         

2017年9月
2018 Master’s Degree Thesis        University code:  10269
                                  Student ID:  51151500126



East China Normal University



Antithetic Path Based SMC and BP Neural Network Method for Parameterized Discrete Time Markov Chain




  Department:  School of Computer Science and Software Engineering
Major:                  Software Engineering                
Direction:       Trustworthy Computing Theory and Technology  
Tutor:                   Assoc Prof. Min Zhang                
Candidate:                     Yan, Jia                       





September 2017
[原创性申明]

  硕士学位论文答辩委员会成员名单

姓名
职称
单位
备注




























摘要
    模型检测方法是一种形式化方法，可以检验系统是否满足某种性质。它借助于对系统建立起的数学模型和依赖时序逻辑公式描述的性质对系统运行检测算法，并给出系统是否满足该性质的结论。作为一种能够对系统进行精确检测的方法，已经被广泛运用于汽车电子，轨道交通以及航天航空等领域。虽然模型检测方法已经在实际的应用中取得了显著的效果，但是挑战依旧存在。在实际的建模过程中，由于系统中某些信息的不确定性，导致所建立的模型包含非确定参数。由于传统的模型检测方法不允许模型中包含不确定参数，所以无法用传统模型检测方法对该种模型进行验证。
    为了对这类具有不确定信息的模型进行建模与验证，本文提出了一种基于BP神经网络（back propagation neural network）的函数拟合的方法对模型在不确定性参数下的模型检测概率值的函数进行拟合。首先，该方法需要获取模型在若干参数下的模型检测值作为训练数据对神经网络进行训练，在训练的过程中为不同的训练样本赋予不同的可靠性权重，从而使得神经网络的训练更加依赖于那些可靠性高的样本，从而使得神经网络拟合和预测的精度得以提高。
    为了提高模型在确定参数下的模型检测的效率，本文提出一种基于方差减小技术的统计模型检测（statistical model checking, SMC）算法。该算法借鉴蒙特卡罗方法中的对偶变量（antithetic variable）技巧，提出了对偶状态和对偶路径的概念，并通过一种基于偏序关系的状态重排序算法对模型中的状态进行重排序，使得满足给定时态逻辑公式的路径在所在状态空间的同一测。基于上述两点抽样产生的对偶路径样本能够使得SMC算法的估计值的误差得到显著的减小，从而提高SMC算法的准确度。
    本文用满足函数来表示从模型的不确定参数空间到模型在此参数下的模型检测值的之间的映射。本文证明了上述定义的满足在一定条件是连续函数。由于无法给出满足函数的具体的解析形式，本文提出使用BP神经网络对满足函数进行拟合。为了提高BP神经网络的拟合精度，本文提出为不同的样本赋予不同的可靠性权重以表示样本的可靠性，通过为高可靠的样本赋予更高的权重，使得神经网络的训练更多地依赖可靠性高的样本，使得训练和预测的精度得到提高。
    SpacNN（Statistical Probabilistic Approximate Model Checker with Neural Network）是基于上述算法实现的统计模型检测工具。通过对网络协议和分布式算法等案例进行分析，发现改进的SMC算法可以显著提升模型在确定参数下的估计值的精度，从而间接减小了SMC所需的样本大小。实验也发现，对于非确定模型的验证，加权的神经网络拟合方法能够减小神经网络预测未知参数下的模型检测值的平均偏差。
关键词：统计模型检测；带参数马尔科夫链；对偶变量；BP神经网络Abstract

     As a formal method, model checking could check whether a system satisfy some kind of property. It use a mathematical method to build a model that representing the system and some temporal logic formula to represent the property and give an answer to whether the system satisfy the property. As a accurate checking method, it is widely used in automobile industry, transportation and space industry. In spite of its wide usage, challenges exist. In many practical practices, many unsure information can not be obtained, thus the model contain unsure parameters. Because the classical model checking method does not allow such a uncertainty, thus new methods need to be proposed.
     To deal with such uncertainty situation, we propose a original curve fitting method based on back propagation neural network to predict model's satisfactory probability under unsure parameters. Firstly, we obtain the satisfactory probability under some certain parameters and use those data as training data to feed the network. Through weighing different training data according on their reliability, we make the training process depends more on the data that is more reliable, thus improving the accuracy of the prediction.
     To improve the efficiency of model checking under certain parameters, we introduce a antithetic sampling based statistical model checking method. We borrows the idea of antithetic variable in Monte Carlo method and introduce the definition of antithetic state and antithetic path. For antithetic path to work, we introduce a state reordering process to make all satisfying path stay in one side of the path space. After the reordering process, sample of antithetic path can be obtained with smaller variances and thus more accurate prediction.
     Also we introduce the definition of satisfactory function to represent the relation from parameters space to probability. We prove the satisfactory function is a continuous function and thus a curve fitting method can be used. We use the BP neural network to do the fitting and introduce the notation of reliablity weight as a measure of sampling's reliablity. By doing this, the accuracy of training and prediction of the neural network can be improved.
     SpacNN(Statistical Probabilistic Approximate Model Checker with Neural Network) is a tool implemented using method above. Through using the tool to check two cases from communication protocols and distributive algorithms, we show that the antithetic path based SMC algorithm could improve the accuracy of the prediction of SMC algorithm and network. 

keywords: statistical model checking, parameterized discrete time Markov chain, antithetic variable, back propagation neural network




























目  录
摘要  i
Abstract    i
第一章 绪论  1
1.1 研究背景    1
1.2 研究动机    2
1.3 相关工作    3
1.4 文章结构    3
第二章 背景知识    5
2.1 模型与性质的描述    5
2.2. 蒙特卡洛方法 7
2.3 统计模型检验算法    8
2.4 总结  9
第三章 基于改进的SMC算法以及BP神经网络的带参数马尔科夫模型验证框架    10
3.1框架概述 10
3.2 基于对偶变量采样法的SMC算法 11
3.3 估计值加权的神经网络函数拟合方法    18
3.3.1 用于分类和回归的BP神经网络    20
3.3.2. 加权神经网络拟合算法   24
3.4 完整算法描述  27
3.5 小结  30
第四章 带参数模型检测预测工具SpacNN   31
4.1. 工具概述   31
4.2. 工具实现   32
4.2.1. 输入层  33
4.2.2 验证层   34
4.2.3 BP神经网络模块  35
4.2.4 小结    35
第五章 案例分析    37
5.1. 概率广播算法 37
5.1.1 模型介绍  37
5.1.2 基于对偶路径的算法正确性评估    41
5.1.3 标准SMC算法和基于对偶路径的SMC算法的估计值方差对比  41
5.1.4. 加权神经网络与非加权神经网络的拟合效果对比    43
第六章 总结与展望   45
6.1 总结  45
6.2 展望  45
参考文献    46
致谢  49


插图清单
图

第一章 绪论
1.1 研究背景
近年来，随着计算机理论的长足进步以及计算机硬件水平的不断提高，计算机的理论成果在越来越多的领域内得到了运用。在此之中，模型检测由于其成熟的理论基础和工具集得到了来自各个领域的广泛关注。在许多领域内都可以见到模型检验的应用实例，例如在生物领域，[1]运用模型验证技术研究机体感染病毒后的感染过程，又例如，在网络安全领域，模型验证又被用于研究蓝牙通信协议[2]的安全性与可靠性。
常规的模型检验技术倚赖于对系统进行正确的建模。在模型检验开始前，研究者会仔细分析实际系统的运行，通过分析系统所处的所有可能的状态以及状态之间的转移关系对系统建立正确的模型。根据研究问题的不同，可采用不同的模型对系统进行建模。得到了抽象了系统状态和行为的模型之后，我们可以利用逻辑公式对系统所需要满足的性质进行描述。例如，针对离散时间马尔科夫链模型（discrete-time Markov chain），我们可以利用概率计算树逻辑公式[3]（probabilistic computational tree logic）描述系统所满足的性质。得到代表系统的模型以及描述系统性质的时态逻辑公式后，可以通过运行模型检验算法验证系统是否满足相应公式。
概率模型检验技术（probabilistic model checking）[4]是模型检验技术中的一个分支。它主要用于分析系统满足某个性质的概率。使用概率模型检验技术可以回答关于系统的一些定量问题：例如“在一个包含不可靠信道的网络内，在10个单位时间内，数据包能从主机A到达主机B的概率为多少？”。概率模型检测技术最早由[5]提出，成熟的工具有PRISM等。经典的概率模型检验算法复杂度依赖于模型的复杂度，所以对于一个复杂度极高的模型，经典的概率模型检验算法存在状态爆炸的问题[6]。
统计模型检验[7][8]（statistical model checking, SMC）是概率模型检验方法中的一种。它本质上是一种蒙特卡罗方法[9][10]（Monte Carlo Method）。在得到了用于描述系统的模型以及用于描述性质的时态逻辑公式后，该方法从模型中获取若干条有限长随机路径，并统计满足特定时态逻辑公式的路径所占的比例。通过将单条有限长随机路径的验证看成是完成了一次伯努利试验，我们可以将定量求解模型满足时态逻辑公式的概率的问题转化成是一个二项分布的参数估计问题。因为SMC算法的时间复杂度不依赖于模型的复杂度，所以经常利用SMC算法验证一些复杂度较高的模型，例如网络协议[11][12]，网络安全问题[13][14][15]以及生物系统[16][17][18]等。
但是无论是传统的概率模型检验方法还是统计模型检验算法，其可以正常工作的前提都是系统的模型应该是确定的，即系统中不能包含不确定的参数。但是在实际的运用中，除去一些标准化极高的领域例如例如微电子领域内的验证外，在大多数领域内，研究者需要应对的往往是不确定模型。虽然可以利用参数估计方法[19][20]在一定程度上消除模型的不确定性，但是在大多数的领域内不确定性并不能被完全消除。本文的研究正是在如上背景下提出。

1.2 研究动机
本文的主要研究对象是带参数的马尔科夫链模型。如前所述，带参数的马尔科夫链模型因为包含了一定的不确定性，无法使用常规的SMC算法以及模型检验算法。可行的一种解决方法就是对模型的参数的空间进行搜索，但是需要在每个参数点下均进行模型检验，效率较差。通过考察模型的满足函数曲线我们发现，当模型在任意两个状态之间的转移概率均是模型参数的连续函数时，模型满足性质的满足函数是一个定义在参数值域上的连续函数。于是我们提出通过对满足函数曲线进行拟合的方法，首先验证模型在给定参数点下的模型检验值，然后通过拟合出一条误差尽量小的曲线，我们可以近似估计模型在未知点下的模型检验值。
为了提高模型在特定参数点下的模型检验值的准确性，本文借鉴了经典蒙特卡罗方法中的误差减小技术，即对偶变量取样法[21]，提出了针对SMC算法的对偶路径取样法。根据经典的蒙特卡罗方法我们可知，估计值的方差越小，估计值的准确度也就越高。对偶变量取样法作为一种方差减小方法，可以有效减小估计值的方差从而提高估计值的准确度。
1.3 相关工作
针对包含不确定性参数的马尔科夫模型，有不少学者提出了参数估计的方法试图在一定程度上降低模型的不确定性。例如，Opper[22]等人研究了马尔科夫跳变过程（Markov Jump Process, MJP）中的参数不确定性，提出了一种拓展自平均属性（mean-field）的方法对系统中路径的分布进行贝叶斯估计，从而在一定程度上削减参数的不确定性。Andreychenko [23]等人提出了一种针对带参数连续时间马尔科夫模型的退出速率（exit rate）以及初始化参数的最大值的估计方法。同样是针对带参数CTMC模型，Bortolussi[24]提出了根据观测数据和模型需要满足的时态逻辑公式学习模型中的不确定参数以及初始化变量。Georgoulas[25]等人提出了将模型检测技术与机器学习相结合的方法，通过提出了一种新型概率程序语言infer.NET Fun[26]对带参数CTMC进行推断和验证。
在[27]中，Bortolussi提出了一种基于贝叶斯估计的方法对带参数的连续时间马尔科夫链（continuous-time Markov chain，CTMC）模型进行模型检验。通过给出模型的满足函数的先验分布，根据观测值进行后验估计，从而对模型在参数空间下进行整体性的模型检测 。基于上述算法，Bortolussi等人实现了相应的验证工具smoothedMC。
1.4 文章结构
本文主要考查带参数的离散时间马尔科夫链模型，解决如何在不进行全局搜索的情况下验证模型在参数空间下的模型检验值。本文首先证明了模型的满足函数在特定条件下是其定义域内的连续函数。为了对满足函数进行拟合，首先需要获取模型在特定点下的模型检验值以此作为BP神经网络的训练数据。为了获取神经网络所需的训练数据，提出了一种基于对偶变量取样法的SMC算法，基于此方法可以有效减小SMC算法估计值的准确性，从而减小SMC算法所需有限长随机路径的条数并有效提高算法效率。本章主要包含六个章节，除本章外，依次介绍了背景知识，方法框架以及具体算法、工具的实现，案例分析以及总结与展望。各章内容包括：
第二章 背景知识
本章主要介绍了用于系统建模的DTMC，CTMC等模型定义，用于描述模型满足性质的概率计算树逻辑（probabilistic computation tree logic，PCTL）以及连续随机逻辑（continuous stochastic logic，CSL）。另外，本章着重介绍了标准的概率模型检测（statistical model checking）方法，便于引入其改进方法。
第三章 基于对偶路径的SMC算法以及BP神经网络的验证框架
本章主要介绍基于对偶路径取样法改进的SMC算法以及改进的加权BP神经网络的满足函数拟合算法，并给出了之中一些详细算法的介绍，例如状态重排序算法，对偶路径生成算法，加权BP神经网络的训练算法等。最后通过一个简单的例子描述完整算法框架。
第四章 带参数马尔科夫链验证工具SpacNN
SpacNN（Statistical Probabilistic Approximate Checker with Neural Network）是本文根据第三章中的方法框架实现的带参数马尔科夫链模型的验证工具。本章主要阐述SpacNN工具的软件架构，模块组成，算法实现以及验证的流程。
第五章 案例分析
本章主要对概率广播算法进行了案例分析。通过分别使用标准SMC算法以及基于对偶路径的SMC算法验证了对偶路径在降低估计值方差方面的效果，并利用加权BP神经网络对模型的满足函数进行了拟合，拟合效果符合准确度要求。
第六章 总结与展望
本章主要总结了本文研究过程中的贡献与不足，并讨论了当前工作中具体存在的不足以及未来的改进方向。










第二章 背景知识

2.1 模型与性质的描述
本文主要研究带参数离散时间马尔科夫链模型（parameterized discrete-time Markov chain）的验证问题，首先给出DTMC的定义以及相应的PCTL定义。
定义1. 离散时间马尔科夫链模型  离散时间马尔科夫链模型可以用一个四元组表示，即，其中有限状态空间，表示初始状态集，表示转移概率矩阵，之中的每个元素表示从状态到的转移概率，并且对于任意的状态，恒有成立。表示一个标签函数（labelling function），它将一个系统所处的状态映射到一个原子命题集的超集中的一个元素。
对于一个DTMC模型，我们用一条路径表示系统的一次执行过程。 一条路径的形式化定义可以用以下的状态序列来表示：

其中并且对于任意的状态。我们定义一条路径中的第个状态为。一条路径可以是有限长的也可以是无限长的。我们定义系统的所有的从状态出发且有限长路径组成的集合为。有了模型有限长路径的定义，我们不加证明地给出一条有限长随机路径在原模型中被取到的概率为

其中是路径的长度。
我们使用PCTL描述DTMC模型所满足的性质。PCTL本质上计算树逻辑的一个概率扩展。
PCTL的语法定义如下：


其中，表示一个原子命题，，并且。
另外，我们分别称和为状态公式和路径公式。我们一般使用状态公式来描述系统所满足的性质。通常一个状态满足当且仅当在所有从出发的路径中，满足的路径所占的概率的形式满足。
以下是状态和路径分别满足公式和的语义。
定义2. 令是一个离散时间马尔科夫链模型。对于任意状态，我们定义如下的满足关系





其中

表示模型中从出发的所有路径中满足路径公式的路径的概率值。
对于任意路径，我们定义如下的满足关系：


即路径满足公式，当且仅当路径的第二个状态满足状态公式。路径满足公式，当且仅当在前个状态中存在一个状态满足公式，并且其之前的所有其他状态均满足公式。

2.2. 蒙特卡洛方法
蒙特卡罗方法[28][29][30]，又称随机抽样方法，不同于一般数值计算方法，其主要使用频率近似概率的思想对未知参数进行估计。其一般工作流程为，将一个待计算值转化为某个概率模型的参数使得此概率模型的某个统计量正好是待求问题的解。因此，要将一个问题用蒙特卡罗方法求解一般需要三个步骤，即构造一个概率模型，实现从该概率分布取样，建立统计量对问题求解。
例如，要求解函数在区间上的定积分，可以对问题进行下列转化：



可以发现，我们首先构造了一个上的均匀分布，然后在将在上的定积分转化为统计量，最后我们使用随机取样的方法对统计量进行估计，即估计。
上述方法的思路可以用下式进行概括：即假设存在一个随机变量，我们需要求的期望值，即。蒙特卡罗的思路是从所满足的一个概率空间中进行随机取样，得到个样本点，然后使用样本均值估计总体期望，即

根据中心极限定理我们可以知道，假设服从正态分布并且总体方差未知。假设为独立同分布的随机变量，那么当样本大小足够大时，随机变量近似服从于参数为的分布。于是，我们有如下的置信区间：

其中，为样本方差，即，为样本大小，为
根据中心极限定理我们有估计值的方差与样本方差之间的关系，

因此上述置信区间可以改写为

从上式可以发现，置信区间的大小仅仅取决于估计值的方差以及置信水平，而与系统复杂度无关。
根据以上讲解，蒙特卡洛方法主要具有以下优点：
1.  对于复杂系统来说算法结构简单。蒙特卡罗方法适用的唯一条件就是能从系统中取样即可，并且估计精度的大小仅仅依赖于抽样次数，这对于解决复杂系统具有优势。
2.  收敛速度不受问题维度的影响。蒙特卡罗方法的收敛指的是随着样本的大小趋近于无穷大，估计值与真实值的误差小于某个阈值的概率将趋近于1。此收敛不依赖于问题的维度。因此蒙特卡罗方法特别适用于解决高维问题。
不过蒙特卡罗方法也存在一些缺点，例如被估计值较小时，需要较大的取样数进行精确估计。
2.3 统计模型检验算法
统计模型检验算法[31][32]（statistical model checking, SMC）不同于PRISM等成熟模型检验工具使用的数值计算方法，它采用蒙特卡罗方法对模型满足某一时态逻辑公式的概率进行估计。SMC算法需要从系统中获取多条系统执行的路径，并统计这些路径的验证结果，最后通过假设检验的方法对模型满足公式的概率进行推断并得出结论。
假设如下描述骰子模型的DTMC模型，

图1 筛子模型状态转移图
Fig.1 state transition graph for the die model
我们验证性质，，即验证模型在5个时间单位内筛子的值出现过为4的概率值。我们通过模拟系统的运行产生条长度为5的随机路径，并统计这些路径中包含状态””的条数，因此，我们可以得出模型满足性质的概率近似为

SMC算法作为一种蒙特卡罗方法，具有蒙特卡罗方法的优点，即适用于复杂系统。而且由于SMC算法对内存的需求以及时间复杂度与模型复杂度无关等优点，对于一些复杂度极高的模型，SMC算法往往是唯一的选择。
2.4 总结
本章讨论了DTMC模型定义以及性质描述，并阐述了蒙特卡罗方法与统计模型检验算法的基本情况，为后续的改进算法的阐述提供了理论依据。











第三章 基于改进的SMC算法以及BP神经网络的带参数马尔科夫模型验证框架
3.1框架概述
为了解决带参数的马尔科夫模型的验证问题，本章首先提出一种新的统计模型检验算法以解决已知参数下马尔科夫模型的检验问题，然后利用模型在若干参数下的验证数据使用基于神经网络的函数拟合的方法计算出模型在未知参数下的模型检验值。
SMC算法将模型检验看成一个参数估计问题予以解决，即假设马尔科夫模型满足某一时态逻辑公式的概率为， SMC算法的任务是计算符合可信度和精度要求的的估计值。
与其他SMC算法不同，我们在取样的时候引入了旨在减小估计值方差的对偶变量（antithetic variables）取样法，估计值方差的减小可以提高估计的精度。而在使用常规SMC算法时，为了提高精度则需提高样本大小。因而对偶变量取样法间接减少了随机路径取样数，提高了SMC算法的效率。
在得到了模型在特定参数点下的模型检验值之后，我们针对带参数模型的满足函数进行函数拟合。由于事先无法确定满足函数的解析形式，于是我们采用神经网络对满足函数进行拟合。不同于常规的神经网络拟合算法，本文从加权最小二乘法中借鉴了估计权值的思想，通过为模型在不同参数下的概率检测值赋予不同的权值，进而表征模型在不同的参数下模型检验值的可靠性，对可靠性高的检验值赋予更高的权重，从而优化了函数拟合的效果。
下面我们主要分为两个部分来叙述本框架采用的算法：基于改进的SMC算法的采样算法，以及基于BP神经网络的满足函数拟合算法。拟合算法采用SMC算法的样本点作为输入，拟合出一条与样本点尽量接近的曲线，从而预测模型在未知参数下的模型检验值。

3.2 基于对偶变量采样法的SMC算法

经典的蒙特卡罗方法通过重复性的取样获取对某个值的估计值。通过中心极限定理[33]（central limit theorem），我们可以给出估计值的置信区间。但是对于同一个待估计的值，却可以有多个估计值，每个估计值的方差有大有小。估计值的可信度随着估计值的方差的增大而降低。常见的减小估计值的方差的方法有对偶变量法，共同变量法以及控制变量法等[34][35]。本文吸取了对偶变量并将其运用到SMC算法中。下面我们首先给出对偶变量的定义。
定义1. 对偶变量 称两个定义在实数域的随机变量和为一对对偶变量如果和服从同一分布且两者是负相关的关系。 
关于对偶变量我们有如下定理[36]。
定理1. 设为一个偶数，为相互独立的对偶变量对，其中对于任意的整数，和均服从于某一特定分布，则


是的无偏估计，并且其方差为




其中，为和之间的相关系数。
从以上定理我们可以看出，由于和之间的对偶性使得恒成立，所以

恒成立，即通过对偶变量取样法得出的估计值的方差要小于标准蒙特卡罗方法的估计值。
下面通过一个简单的例子来说明对偶变量是如何减小估计值方差的 。
假设存在随机变量，的表达式为

其中，参数未知。现在需要对进行估计，即运用蒙特卡罗方法计算出一个尽可能准确的的估计值。
我们将看成是一个黑盒对参数进行估计。标准蒙特卡罗方法的思路是产生个独立且服从于均匀分布的随机变量，然后通过函数得到的个样本，则的估计值为

我们可以得出的方差为

由于相互之间彼此独立，所以对任意恒成立，上式可以写成

采用对偶变量的蒙特卡罗方法和上述方法略有不同。 假设样本大小为偶数，即。我们首先产生个独立且服从于均匀分布的随机变量，剩下的个随机变量则取作，的上标表示该随机变量是的对偶变量。类似地，我们给出的表达式：

类似的我们给出的方差

其中，等于

可以看出，由于和按照上述方法获取并且当两者不相等时，恒有即恒成立，所以我们有下式成立

下面分析方差的减小将如何影响样本的大小。
根据中心极限定理 ，均值为，方差为的独立同分布的随机变量的算数平均，当充分大时近似服从均值为，方差为的正态分布。
另外关于样本方差和均值我们还有以下定理[37]：
定理1 设分别是来自于总体的样本，，分别是样本的期望和方差，则有

上述定理表示近似服从参数为的t分布。
所以，我们有

即

于是我们得到的一个置信水平为的置信区间为

因为为的无偏估计，而估计值，于是我们有

所以上述置信区间也可以写作

分析上述置信区间我们可以发现，估计值的方差的减小能有效减小置信区间的宽度，这也从理论上反映出估计值的方差的减小能提高估计值的精度。进一步，假设估计值的方差减小为原来的，则为达到同样的精度，假设估计值的方差不变，样本大小必须增到原来的倍，因此我们有以下结论，即
结论： 假设现在要求大小为的置信区间为未知参数进行估计，如果使用标准蒙特卡罗方法需要大小为的样本，而使用对偶变量法使得估计值的方差是标准估计值的倍，则使用对偶变量法需要的样本大小为。

下文将阐述如何在SMC算法中运用上述思想。首先我们给出一条有限长的随机路径的对偶路径的定义，接着我们证明，通过利用对偶路径改进传统的SMC算法，可以有效减小估计值的方差，从而提高估计的精度。
通过回顾在第二章中描述的SMC算法可知，马尔科夫模型中的一条随机路径唯一对应于一个由随机数组成的向量。 借助于这一点，我们给出适用于DTMC和CTMC的对偶路径的定义。
定义1 马尔科夫模型的对偶路径 对应于任意一条马尔科夫模型产生的随机路径，其对偶路径为。
以下是完整的产生对偶路径的算法。
算法2. 基于对偶变量的DTMC模型随机路径产生算法
输入：模型DTMC，路径长度d
输出：长度为d的两条对偶路径
if d < 0 then
      return empty path
else
      path1 = path()
      path2 = path()
      for i = 1 to d do
             rnd = uniformRandom() // 产生[0,1]上服从均匀分布的随机数
             antiRnd =  1 – rnd
             nextState = chooseNextState(rnd)
             nextState2 = chooseNextState(antiRnd)
             path1.append(nextState)
             path2.append(nextState2)
      end for 
return path1, path2

以上算法的输入同算法1，但是不同于算法1只返回一条随机路径，上述会返回两条互为对偶路径的随机路径。观察以上算法可以发现，算法2在为产生下个状态而生成随机数的同时，会将作为第二条随机路径选择下个状态的依据，从而产生了两条互为对偶路径的随机路径。

通过对SMC算法的阐述我们知道，马尔科夫模型的验证问题本质上是一个0-1分布的参数的估计问题。假设模型满足公式的概率为，我们的任务是计算出一个尽可能接近的估计值。
SMC算法的思路可以用下式来表示

其中，函数为

通过对0-1分布参数估计的问题的阐述我们发现，只要保证两条路径的验证结果和不同就可以减少估计值的方差。然而通过观察对偶路径的定义，我们发现上述定义无法保证互为对偶路径的两条路径的验证结果不同，此问题可以通过定义状态之间的一种偏序关系得以解决。
定义2 状态之间的偏序关系 对于马尔科夫模型，LTL公式，对于中的任意状态，我们定义为所有经过且满足公式的路径的总条数，为所有经过的路径的总条数。对于任意中两个状态和，我们称和满足偏序关系当且仅当

下面借助一个简单的模型阐述上述偏序关系的使用。
假设模型的状态转移图如下图所示：

图2模型状态转移图
Fig.2 State transition graph for M model
假设我们的任务是求模型满足公式的概率，根据DTMC有限长随机路径产生算法， 只需产生n个服从0到1之间的均匀分布的随机数即可，假设产生的随机数为。可以发现，当路径的最后一个状态为a=2时，该路径满足公式。同样是根据算法1[DTMC有限长路径产生算法]，我们发现，系统产生的两条对偶路径的路径的验证结果和并不一定不同，于是我们使用上述定义的偏序关系重新排列初始状态的所有使能状态（enabled state）。
要对状态进行排序，首先需要知道每个状态的和，所以我们首先需要产生一定数量的路径并进行验证，然后利用这些路径对模型中的状态进行成功路径和失败路径的计数，最后根据对状态进行排序，完整算法见下图所示。
算法1 状态重排序算法
输入：n条随机路径组成的数组paths以及相应的验证结果组成的数组results，模型M
输出：None
for p, r in zip(paths, results) // 同时遍历路径数组和验证结果数组
       for state in p
               if r == true:
                      state.s_cnt += 1 // s(S)加一
               state.c_cnt += 1 // c(S)加一
       end for 
end for 
for state in M
         states = next(state) // 获取状态state的全部使能状态
         sort(states, key=state.s_cnt/state.c_cnt) // 根据state.s_cnt/state.c_cnt对状态进行排序
end for 

我们利用上述算法对上述模型进行状态重排序，实验对模型总共产生了10条路径，其中有4条为满足路径，其余的6条为失败路径，经过计数后可以发现状态1, 2, 3[换一种表述?]的值依次是0，1和0，于是排序后，状态2将排在初始状态全部使能状态的最后。
可以发现，经过使能状态重排序后，模型产生的两条互为对偶路径的路径的验证结果和不同的可能性大为提升，从而可以提升估计值的方差。
以下是完整的基于对偶路径的SMC算法。
算法3. 基于对偶路径的SMC算法
输入：DTMC模型，bounded LTL公式，置信区间参数，
输出：DTMC模型在初始状态下满足特定PCTL公式的概率
n = 0 // 抽样总个数
positive = 0 // 验证结果为true的路径总数
samples =  computeSamples(, d)
length = getLength() // 解析bounded LTL公式，获取取样路径长度
if samples % 2 != 0 then 
       samples += 1
end if 
for i = 1 to samples / 2
      path1, path2 = genRandomPathAnti(length) // 产生长度为length的两条随机路径
      if checkLTL(path1, ) == true then
              positive += 1
      end if
      if checkLTL(path2, ) == true then 
              positive += 1
      end if
      n += 2
end for

可以看出，上述算法在传统SMC算法的基础上，通过采用对偶算法生成随机路径，除了可以减小随机数的生成数量外，还可以提高算法估计的准确性。

3.3 估计值加权的神经网络函数拟合方法
理论表明，神经网络可以以任意精度拟合任意函数[38]。所以，在很多传统函数拟合方法无法适用的场景，就可以采用神经网络作为拟合特定曲线的手段。例如，在生产生活中已知变量之间存在相互关系，但是无法确定其解析表达式时，则无法采用传统的最小二乘法对曲线进行拟合。
在本节中，我们首先会阐释神经网络的基本原理，先后阐释用于分类问题和回归问题的神经网络。接着，我们会引入在加权最小二乘法中引入的估计权值的概念，并阐述在神经网络的训练算法中如何引入这一概念帮助提高神经网络的拟合性能，最后我们给出完整算法并用例子说明。
在阐述本章将要介绍的算法之前，回顾我们在第二章中介绍的理论背景。本质上来讲，系统中的每条路径均对应一个实数值，这个实数值反应了这条路径在所有路径中被抽中的概率。而一个PCTL公式的验证结果可以用所有满足相应LTL公式的路径的概率之和来表示，即

根据定理1[神经网络可以拟合任何连续函数]，任意一个连续函数都可以被一个包含任意多个神经元的三层BP神经网络以任意精确度拟合。于是，我们首先定义一个带参数的离散马尔科夫模型的满足函数，接着证明该满足函数在定义域内是连续函数。

定义1. 满足函数 给定带参数的离散马尔科夫模型，PCTL公式，假设的取值范围为，定义定义域为，值域为的函数

即，给定内的一个点，我们定义了满足函数的值为带参数模型在参数取时模型满足公式的概率值。
下面证明上述定义的满足函数在定义域内是连续的。
定理2. 给定一个带参数的马尔科夫模型，假设模型中任意两个状态之间的转化概率关于均是连续函数的话，那么其对应的满足函数在定义域内是连续函数。
证明：由前所述，模型满足PCTL公式的概率可以用满足相应LTL公式的路径概率之和来表示。假设用来表示该集合。可以发现，与参数的具体取值无关。假设用表示该集合的路径概率之和。所以，我们只要证明是关于的连续函数即可。
又由于，所以我们只要证明任何一条随机路径被抽中的概率值是的连续函数即可。
由第二章中的理论背景可知，

其中是随机路径的长度，是某个转化发生的概率。由已知条件，关于是连续的，由连续函数的性质可知，关于是连续的，即结论得证。
结合定理1和定理2可知，我们可以使用BP神经网络拟合模型对应的满足函数。
3.3.1 用于分类和回归的BP神经网络
下面通过一个简单的分类问题说明神经网络的基本工作原理。
考虑识别手写体数字的问题[39]。下图展示了一些手写体数字的例子。

图3 手写体数字
Fig.3 Handwriting figures
在阐释BP神经网络之前，我们先给出S型神经网络的定义。
下图表示一个S型神经元。


图4 S型神经元
Fig.4 Logistic neural
上述S型神经元接受作为输入，是其输出。的表达式如下所示：

其中，表示S型神经元的权重，表示其偏置。其中，（即逻辑函数，也叫S型函数）的形状酷似英文字母’s’，这也是S型神经元命名的由来。S型神经元是BP神经网络的基本组成单元。
一个典型的BP神经网络由三层神经元组成，分别为输入层，隐藏层以及输出层。输入层和输出层包含的神经元的个数与具体的输入以及问题的类型有关，隐藏层的神经元的个数属于超参数，一般是事先给定或者根据问题规模进行选择。
使用神经网络解决特定问题一般大致分为两步：训练与预测。前者是神经网络的训练阶段，最常见的算法是随机梯度下降算法（stochastic gradient descent, SGD）。后者包含了一个逐层前向传播的过程，所以一般也称为前向传播算法。下面依次叙述上述算法。
神经网络的训练问题可以这样描述，假设用表示神经网络的所有神经元的权重组成的向量，表示所有神经元的偏置，我们定义如下的代价函数：

其中，表示样本的个数，表示每个训练样本的输入，表示对应的训练样本的输出，表示神经网络在输入为的情况下的输出值，表示向量的模。我们一般把称之为二次代价函数。
有了代价函数，我们这样叙述BP神经网络的训练问题，即给定一组训练数据，我们需要找到使得代价函数最小的和。
如何找到合适的以及使得最小？这里经典的BP神经网络使用随机梯度下降。一个多元函数的梯度的定义如下：

从梯度的定义可以看出 ，多元函数的梯度的每个分量是函数关于每个分量的偏导数。
关于梯度有如下显而易见的定理：
定理1. 对于多元函数来说，当自变量的增量时，。
上述定理可以由模的非负性证明。根据微积分，当函数的自变量发生了一个很小的变化时，如，函数值的变化量可以用下式近似表示：

结合上述两式，我们可以得出当时，函数值增量恒成立。所以，通过不断计算函数在当前点的梯度，从而计算出自变量的增量，就可以不断地使得函数值减小，直至达到最小值。
那么如何运用梯度下降算法求解式[?代价函数]呢？观察式[?代价函数]，我们可以发现是和的函数，对于任意的与 ，我们均使用下式进行更新：


根据定理1以及其推论，我们有恒成立。我们只需反复运用上述两式对中的每个以及进行迭代，直至达到某个迭代停止条件即可。
虽然从理论上分析梯度下降算法有较好的效果，但是从实践运用上来看仍存在不少问题，其中最严重的就是算法的运行效率问题。从上述两式可以看出，在每次迭代过程中，算法都要遍历训练样本中的每个进而求平均值，这样的效率不高。如果每次迭代只以少样样本作为迭代，效率可大大提高，而这也正是随机梯度下降的思路。
完整的随机梯度下降算法如下所示。
算法1. 随机梯度下降算法
输入：训练样本
输出：代价函数的最小值
initialize  and 
repeat until convergence {
         randomly choose m samples from 
         
          
}
return  and 

在上述算法中我们可以发现，随机梯度下降算法的每次迭代中，主要的工作就是计算代价函数关于神经网络中的权重和偏置的偏导数，BP神经网络使用反向传播（back propagation）算法[40]对神经网络中每个神经元的权重和偏置进行更新。反向传播算法本质上使用导数的链式法则对神经网络进行逐层求偏导，与经典的神经网络训练速度相比，效率得到了极大的提高。
神经网络的前向传播算法主要用于预测与分类，给定神经网络的输入，利用前向传播算法对神经网络进行逐层求值，从而得出最后的输出。具体的，假设神经网络中第层中第个神经元到第层中第个神经元的链接上的权重 为，第层上第个神经元的偏置为，第层上第个神经元的激活值为，那么第层上的第个神经元的激活值就可以用下式表示：

当采用向量表示每一层的各个神经元的偏置，用矩阵表示层和层之间链接的权重时，我们可以将上式写成

迭代地利用上式，我们就可以由输入层逐层向后计算，从而计算出输出层的值。
至此我们将神经网络的主要的基本原理叙述完毕，概括地说，神经网络使用反向传播算法计算代价函数关于权重和偏置的偏导数，利用随机梯度下降算法对权重矩阵和偏置向量进行迭代更新，从而求解使得代价函数最小的权重矩阵和偏置向量。得到这两个值之后，就可以利用训练好的神经网络对模型在未知输入下的输出进行预测，预测采用前馈算法。对于分类问题，输出层神经元的激活函数一般采用逻辑函数，逻辑函数将映射到，因此，对于二分类问题，可以如下定义：

而对于回归问题，输出层神经元的激活函数一般采用线性函数，即。

3.3.2. 加权神经网络拟合算法
但是，上述算法没有考虑到每个样本的可靠性。由于SMC算法本质上是一种蒙特卡罗方法，其得到的结果本身就带有一定偏差。而且，模型在不同参数下运行SMC算法获取的数据的偏差也不同。神经网络在训练时应该考虑到训练数据的可靠性。对于神经网络来说，如果已知观测值的可靠性要高于，那么应该给赋予更大的权重。换句话说，因为的可靠性要高于，因此其对函数拟合的影响也更大。下面，我们给出训练数据可靠性权重的概念 。
定义1.可靠性权重 可靠性权重表达了我们对于一个训练数据可靠性的度量，可靠性越高的观测数据，其在神经网络训练中的可靠性权重也越高。
上述定义仅从功能性方面阐述了可靠性权重，并未给出了可靠性权重应该如何定义。从直观上讲，可靠性权重应该由估计值的标准差唯一决定，即估计值的标准差越大，其可靠性程度越低。但是，如果要为每个估计值均计算它的标准差，计算代价又更大。因此本文提出一种分段计算标准差的方法。它首先将轴进行分段，在每一段中取若干个样本点，然后用直线对这些样本点进行线性拟合，拟合后可以计算出这些样本点到直线的平均偏移量，这个偏移量实际上表达了该段数据点的总体不确定性，平均偏移量越大，说明该段数据点的不确定性也越大。
 针对第个子段中的个数据点，我们使用直线对数据点进行拟合。任意一个观测值与这条直线的偏差反映了每一段观测值的不确定性，它可以由下式表示：

基于上式，我们可以给出该段内所有样本点的可靠性权重为

下面给出完整的权重计算算法。
算法2. 样本点权重计算算法
输入： 第段内所有样本点，
输出：该段内所有样本点可靠性权重
k = 1.0 // 直线斜率
b = 0.0 // 直线截距
 = leastSquare( // 执行标准拟合直线最小二乘算法，得出斜率和截距的估计值
standardDiv = standardDiv(
return 1.0 / 

在实际的运用中，为了保证权重的引入不会影响到神经网络的训练，需要对权重采用归一化措施，即

在介绍加权神经网络拟合算法之前，我们需要回顾一下经典的反向传播算法。
首先让我们定义以下符号：假设我们定义从层第个神经元到第层的第个神经元的链接的权重为，第层中第个神经元的偏置为，第层中第个神经元的激活值为，第层上第个神经元的带权输入为，用向量形式表示即为。
我们定义第层上第 个神经元的误差为

经典的反向传播算法包含四个方程，首先，反向传播算法需要计算输出层的误差，即

上式的推倒依赖于偏导数的链式法则，其中，为逻辑函数。
上式用向量形式重写即为

其中，，，。
然后，我们利用神经网络下一层的误差计算当前层的误差，假设我们需要计算第层神经元中第个神经元的误差，即。由于上一层某个神经元的误差会传递到下一层所有神经元，所以需要对下一层的神经元的误差进行求和。

由于

故上式可以改写为

而上式的向量形式为

通过上述两个公式，我们可以计算出神经网络每一层的误差。而通过误差，我们可以求出代价函数关于神经网络中每个权重以及偏置的偏导数。
具体地，我们有代价函数关于第层神经元中第个神经元的偏置的偏导数为：

而代价函数关于某个权重的偏导数为

综上所述，反向传播算法通过计算输出层的误差然后逐层往后计算每一层神经元的误差，并通过链式法则计算代价函数关于权重和偏置的偏导数。
回顾代价函数，

如前所述，不同的样本具有不同的可靠性权重，因此我们改写上式，即

可以发现，可靠性越高的样本，在代价函数中所占的比重也就越大，其对权重和偏置的影响也就越大。而可靠性越低的样本，因为被赋予了更小的权重，对神经网络的影响也就越小。
下面给出完整的加权神经网络梯度下降算法。
算法4. 加权神经网络随机梯度下降算法
输入：神经网络的权重向量以及偏置向量，个训练样本，样本的权重向量
输出：训练好的神经网络的权重以及
initialize  and 
repeat until convergence {
         randomly choose m samples from 
         
          
}
return  and 

3.4 完整算法描述
下面通过一个例子描述算法的整个运行过程。
我们以如下模型为例。

图5. 包含三个状态的带参数马尔科夫模型
Fig.5 Parameterized Markov chain model containing three states
从上述状态转移图我们可以看出，模型在状态0下的转移依赖于参数，从状态0转移至状态1的概率为，转移到状态2的概率为，状态1和状态2均为吸收状态。模型需要验证的公式为

表示系统在5个时间单位内到达状态1 的概率。
由于系统的行为取决于参数的具体值，所以上述模型是一个带参数的马尔科夫模型。这里，我们对参数在内进行验证。
首先我们对区间进行分段，假设将其均匀分为10段。依据算法[?加权随机梯度下降]，我们需要在每一段内取若干个样本点，运行SMC算法，假设每段取100个样本点。对每个参数点，我们运行基于对偶路径的SMC算法，得到100个样本点，。以下是我们在区间段内得到的100个样本点。

图6. 区间内100个样本点分布图
接着，我们需要为这100个样本点确定可靠性权重，将这100个样本点作为输入，运行线性拟合的最小二乘算法，得到直线，求出样本到直线的平均偏差，求出每个样本点的可靠性权重。重复为每个区间运行上述算法，计算出每个样本区间的可靠性权重。
下表为各个区间段的可靠性权重。
表1. 各区间段的可靠性权重
区间
权重
[0.0, 0.1)
2.005
[0.1, 0.2)
0.362
[0.2, 0.3)
0.880
[0.3, 0.4)
0.368
[0.4, 0.5)
1.287
[0.5, 0.6)
1.251
[0.6, 0.7)
0.4253
[0.7, 0.8)
0.865
[0.8, 0.9)
0.509
[0.9, 1.0)
2.045

观察图5以及表1可以发现，区间内的样本点越集中意味着区间中的样本点的可靠性越高，代表着这些样本点的权重也应该越高。得到了1000个样本点以及每个样本点对应的可靠性权重后，将这些信息输入给神经网络进行训练，就可以得到训练好的神经网络模型。下图是训练好的神经网络预测结果和利用PRISM软件对模型进行求解的对比图。

图7. 预测结果与PRISM结果对比图
Fig.7 Comparison between predictions and results from PRISM
从上图可以看出，神经网络预测的结果与PRISM软件通过解析计算出的结果相差无几。
可以认为PRISM工具的验证的结果为真实值，通过计算可以得出， 神经网络和PRISM在未知点（依旧位于[0，1]之间）的预测结果的误差为0.0096，满足精确度要求。

3.5 小结  
本章分别阐述了基于对偶路径改进的SMC算法以及基于加权的神经网络训练算法，并结合具体案例给出了完整的算法描述。




第四章 带参数模型检测预测工具SpacNN
4.1. 工具概述
SpacNN（Statistical Probabilistic Approximate Model Checker  Using Neural Network）是根据上述理论基础开发的一款带参数离散型马尔科夫模型检测工具。该工具使用python2.7开发，集成了编译，解析，检测，训练以及预测等功能。支持在Mac OS X以及Windows平台下对带参数离散马尔科夫模型进行验证，下图为工具的操作界面。

图8 SpacNN主界面
SpacNN的主要特性有：
1.  支持PRISM定义的模型语言，也就是说，SpacNN支持PRISM所支持的模型文件格式。
2.  支持LTL公式的部分子集，同样支持PRISM语言所定义的LTL公式语言。
3.  实现了第三章中提到的改进的SMC算法以及加权算法，支持对神经网络的训练以及利用神经网络对模型在未知参数下进行模型检验。

4.2. 工具实现
本工具主要使用python2.7进行开发，底层使用python核心库以及numpy，matplotlib等第三方库用于矩阵运算以及图形绘制。软件的架构图如下所示。

图9. SpacNN架构图
可以将SpacNN软件的架构分为两部分来看，第一部分checker，主要定义了模型的底层表示，相关功能类以及工具类。其负责的主要功能主要有：模型的定义，随机路径的产生，有限长路径的验证，权值的产生等等。第二部分regressor，定义了使用加权反向传播算法的神经网络，向上层提供训练以及预测功能。
下面将分模块依次介绍各个模块的主要功能。

4.2.1. 输入层
输入层的各个模块，主要负责和用户的交互工作，并提供作为检验层输入的输出。在用户打开软件的时候，启动程序首先启动UI程序，提供页面给用户操作，考虑到软件的专业性，软件界面在设计之初就考虑到了用户使用的友好性。软件在影响到结果的关键步骤都设置了提示消息，确保用户对软件提供的关键功能不会遗漏。并且，软件在简洁性也做了相应的设计，使得界面只保留必要的功能，确保用户可以在拥有最少相关知识的情况下使用软件。
软件需要用户提供两方面的输入，分别是模型文件和模型应该满足的时态逻辑公式。用户分别通过选择.prism格式的文件和以及手动输入公式的方式输入上述两项。在用户完成输入后，PRISM模型语言解析模块和LTL公式解析模块会对用户的输入进行解析。
用户必须确保所输入的PRISM文件中不包含语法错误。PRISM模型语言解析模块会获取到PRISM文件的文本，在从文本中去除注释后，会对文本进行逐行解析。解析程序会从用户输入的文本中获取模型类型，模块名，变量，常量以及转化关系等信息，并保存在相应的数据结构中。软件使用类保存此信息，如下所示。
ModulesFile
- name         : String
- variables   : Map
- constants  : Map
- commands: Map
- duration    : Integer
图10. ModulesFile结构图
如上所示，其中用于指定在产生随机路径时的路径长度。
与PRISM文件的输入方式不同，用户在输入LTL公式时需要手动输入。同样的，在用户输入LTL公式后，LTL公式解析模块对将LTL公式解析成一棵抽象语法树（abstract syntax tree，AST），在获取到LTL公式对应的AST后，LTL公式解析模块会将该树的层次遍历结果作为输出提供给验证层的随机路径验证模块进行验证。例如，对于输入”true U<=10 failure”，解析模块的输出结果为”U[0, 10], true, failure”，可以看到遍历结果之间用逗号隔开。
在用户完成上述两项输入之后，用户可以对验证过程中的参数进行设定，如下图所示。

图11. 验证参数设定截图
其中，隐藏层神经元个数，矫正率以及学习速率属于神经网络模块所需的参数，另外训练样本取样数表示随机路径产生模块产生随机路径的数目。
最后，在程序加载之前，软件会提前到系统参数文件中读取软件中各个参数的默认值，用户也可以修改该默认值，避免每次打开软件时均要修改。经过输入层的处理后，系统给下层提供了模型类对象，LTL公式以及用户设定的参数。

4.2.2 验证层
验证层的主要工作有负责从某个状态产生指定数量的随机路径，验证产生的随机路径，负责分段计算所产生的样本的可靠性权值，下面分条分析。
其中，随机路径产生模块负责产生指定数目的随机路径。随机路径的产生实质上是产生一系列随机数的过程。对于离散时间马尔科夫链模型来说，在决定下个状态的时候，需要产生一个服从于范围内均匀分布的随机数。对于连续时间马尔科夫链模型来说，除了决定下个状态之外，在任意状态的停留时间也需要通过随机数来产生。
产生的随机路径通过随机路径验证模块进行验证。模块的返回结果是一个布尔值，表示该条路径是否满足给定公式。验证算法采用一种递归验证的策略。
验证器模块负责管理随机路径的产生与验证，是验证层负责对外的门面类。上层通过该模块传递验证层所需的参数。在对参数进行必要的有效性验证后，验证器模块会调用随机路径产生模块与验证模块，并对结果进行统计。
由于需要采用不同的随机路径产生算法，所以在实现上对算法也做了一定的抽象，程序单独抽象出了随机路径产生算法接口类，好处是保证了程序的鲁棒性以及灵活性。算法接口类的示意图如下所示。
PathGenerator接口类
+ generate(ModulesFile model) : steps
图12 随机路径产生算法接口类
最后，样本权重计算模块负责计算每个样本对应的可靠性权重。在验证层完成所有的工作后，会将每个样本的参数值，模型检验值以及对应的可靠性权值打包成数组传递给BP神经网络模块用于回归分析。

4.2.3 BP神经网络模块
BP神经网络位于软件处理的最后一层。输入层主要负责接受用户的输入并对输入进行解析和预处理。验证层主要负责对模型以及公式进行验证并产生拟合所需的训练数据，BP神经网络模块则主要负责消费这些数据对神经网络模型进行训练，并预测模型在未知点满足公式的概率。

4.2.4 小结
本章主要介绍了软件的组织架构并对各个模块进行了功能性分析，从输入和输出对模块之间的关系进行了梳理，下一章将会结合案例分析SpacNN的使用。













第五章 案例分析
在本章中，我们使用第四章中介绍的模型检验工具SpacNN对一个案例进行分析，以此说明在工具在验证真实案例时的效果。

5.1. 概率广播算法
5.1.1 模型介绍
概率广播算法[?]是一种通信协议（communication protocol），用于描述多个计算机之间的通信过程，属于广播算法的一种。它由简单的泛洪算法改进而来。在一个由采用泛洪（flooding）算法[?]的计算机网络中，每一台计算机在接受到消息后，都会将该信息以广播（broadcast）的形式发送到所有的邻居节点。概率广播算法是在简单的泛洪算法下进行的改进。假设在一个计算机网络中，存在一个消息源节点（source node），它首先将消息通过泛洪（flooding）的方式传递给它的所有的邻居节点，然后进入休眠模式。其他所有的节点在接收到消息后，将随机地进行下列两种行为中的一件：
1.  以的概率将接收到的消息进行转发（forward），然后进入休眠状态
2.  以概率的概率不发送消息，然后进入休眠状态。
这样做的目的是在保证了网络的稳定性的前提下减少了带宽的浪费。可以看到，在等于1的时候，上述算法等同于泛洪算法。现在考虑一个22的网络拓扑结构，以下为示意图：

图13 22网络拓扑图
如图所示，节点0是源消息节点，在起始状态节点0会向直接相邻节点发送消息，即节点0会向节点1和节点2发送消息，同理，节点1在收到消息后，也只会向节点0和节点2发送消息。节点0在发送完消息后随即进入休眠状态。节点1在接收到消息后，会选择转发或是不转发这条消息，转发的概率为。而不管是转发还是不转发，节点1都会进入休眠状态。
另外，我们假设网络中的通信是同步的，即消息的接收和发送都由一个外部时钟控制，即，所有在同一时刻接收到消息的节点将同时选择是否转化消息，并在同一时刻进行转发。

上述结构使用PRISM语言描述如下：

// 非初始节点在接收到消息后进行转发的概率
const double psend; // 模型参数
// 节点1模块
module node1
active1:[0..1] init 1; // 表示节点1是否处于激活状态
send1:  [0..1] init 0; // 表示节点1是否转发消息
[tick] active1=1 & send1=0 & send0+send3 >=1 -> psend:(active1'=1)&(send1'=1)+(1-psend):(active1'=0)&(send1'=0);
[tick] active1=1 & send1=0 & send0+send3 <1 -> (active1'=1)& (send1'=0);
[tick] active1=1 & send1=1 -> (send1'=0)& (active1'=0);
[tick] active1=0 -> (send1'=0)& (active1'=0);
endmodule

可以看到，节点1包含两个变量，即和，前者表示节点1是否处于激活状态，处于激活状态表示节点1尚未决定是否转发消息；后者表示节点1是否已经转发消息，为1表示节点1选择转发消息，为0表示节点1忽略消息。之后的四条转移关系分别表示如下含义：
1.  当节点1处于激活状态且未转发消息时，此时如果接收到任何来自于节点0或者节点1的消息，则以概率选择转发消息，而以概率选择忽略。
2.  当节点1处于激活状态且未转发消息，当此时未接收到来自节点3或者节点0的消息，则继续保持当前状态直到下一个时钟周期。
3.  当节点当前处于激活状态并且已经转发了来自相邻节点的消息时，此时节点1进入休眠状态，并置为0。
4.  当节点1处于休眠状态，保持此状态不变。
当考虑到网络中可能发生的冲突和延时时，上述模型将发生改变。考虑网络中发生的冲突。网络中发生冲突是指在网络中，同时存在多个节点向同一个节点发送消息，对于上述节点1，即，此时节点1将接收不到任何有用的消息，故选择忽略。而当考虑节点的延时时，这里使用简单的无记忆延时模型（memory less delay），即当节点接收到任意一个消息时，它发生延时的概率为某个固定值，即其不受当前节点在此之前接收的消息的延时情况的影响。
考虑到上述两点特性且修改之后的PRISM模型如下所示。
// 节点1在仅接收到来自节点0或者节点3的一条消息时发生延时的概率
const double pdelay =0.5;
module node1
// 节点1所处的状态，0:休眠状态；1:转发状态；2:延时状态
active1:[0..2] init 1;
// 节点1是否已转发消息，1:已转发；2:未转发
send1:  [0..1] init 0;
[tick] active1=1 & send1=0 & send0+send3 =1 -> (1-pdelay)* psend: (active1'=1)&(send1'=1) +(1-pdelay)*(1-psend):(active1'=0)&(send1'=0) +  pdelay:           (active1'=2)&(send1'=0);
[tick] active1=2-> (1-pdelay)*psend: (active1'=1)&(send1'=1) +(1-pdelay)*(1-psend):(active1'=0)&(send1'=0)+ pdelay: (active1'=2)&(send1'=0);
[tick] active1=1 & send1=0 & send0+send3 !=1 -> (active1'=1)& (send1'=0);
[tick] active1=1 & send1=1 -> (send1'=0)& (active1'=0);
[tick] active1=0 -> (send1'=0)& (active1'=0);
endmodule

可以看到，修改之后的节点1模型除了休眠状态和激活状态之外，还增加了一个延时状态；除此之外，节点1在同时接收到来自节点0和节点3的消息时，将忽略来自两者的消息并保持原状态。当节点1只接收到来自节点0或者节点3的一个消息时，将以概率pdelay=0.5发生延时，或以概率1-pdelay=0.5的概率决定是否转发，其中转发的概率依旧是psend。最后，当模型处于已发送消息的状态或者是休眠状态时，转化的关系同模型1[no collision and no delay]一致。

下面我们将给出运用第三章介绍的方法对概率广播算法进行验证的情况。我们将从以下几个角度对验证结果进行分析：
1. 评估基于对偶路径的SMC算法的正确性。
2. 对比常规SMC算法和基于对偶路径的SMC算法的估计值的方差。
3. 评估基于对偶路径路径在不同的参数下的估计值的方差。
4. 对比加权神经网络和未加权神经网络在曲线拟合方面的差异。

5.1.2 基于对偶路径的算法正确性评估
我们对如下性质进行检测，即“网络在10个单位时间内消息发送到节点3的概率”。
在SpacNN中，上述公式可以如下表示

注意，从节点0发出的消息最终到达节点3当且仅当节点3的状态为休眠状态，即。
我们分别使用标准SMC算法以及基于对偶路径的SMC算法对模型满足上述性质的概率进行估计，分别运行10次的计算结果如下表所示。


表2标准SMC算法与基于对偶路径SMC算法的正确性
标准SMC算法
误差
基于对偶路径的SMC算法
误差
0.61333
0.02779
0.57666
0.00887
0.61333
0.02779
0.54666
-0.03887
0.59333
0.00779
0.59
0.00445
0.58666
0.00112
0.56333
-0.0222
0.66666
0.08112
0.55
-0.0355
0.52
-0.06554
0.59666
0.0111
0.57333
-0.01220
0.55666
-0.0288
0.59333
0.00779
0.58125
-0.7554
0.57333
-0.01222
0.62333
0.0377
0.60666
0.02112
0.57333
0.0122

通过上式我们可以看出标准SMC算法和基于对偶路径的SMC算法均可以给出近似正确的结果。
5.1.3 标准SMC算法和基于对偶路径的SMC算法的估计值方差对比
本节主要对两种算法的估计值的方差进行比较。
首先来看样本内部相关系数。假设样本的大小为偶数，即。则样本内部相关系数定义为

有相关系数的概念可知，任意的和对的结果互不相同的组数越多，上述定义的相关系数的值越小。
下面，我们分别使用标准SMC算法和基于对偶路径的SMC算法取得100个大小为300条随机路径的样本对参数的情形下进行分析，统计样本内部相关系数的直方图如下图所示。

图14 标准SMC算法和对偶路径SMC算法的样本内部相关系数直方图
从上述直方图我们可以看出，对于标准SMC算法所取得的样本，其内部相关系数一般在0附近，这意味着其线性相关性基本为0。而对于对偶路径的SMC算法，由于采用了状态重排序算法，使得互为对偶路径的两条路径之间的验证结果相反的概率大大提高，应该其样本内部相关系数得以减小，其均值在-0.30到-0.25之间，且所有样本的内部相关系数均小于0。
下面来看两种算法所产生的估计值的方差的对比。本实验进行100次方差计算，每次方差计算产生10个样本，每个样本的大小为20条随机路径，参数值为。绘制出的直方图如下所示。


图15标准SMC算法和对偶路径SMC算法的估计值方差直方图
可以看出，标准SMC算法的估计值的方差总体分布于0.002到0.008之间，且分布较为均匀，通过进一步的计算可得方差小于0.004的比例为56%；而对于基于对偶变量的SMC算法，有将近92%的数据分布在0.004以下的区间，并且，方差数小于0.002的频数也远远小于标准SMC算法。由此可见，基于对偶路径的SMC算法的确可减小估计值的方差。
5.1.4. 加权神经网络与非加权神经网络的拟合效果对比
最后一节将验证使用加权BP神经网络对带参数马尔科夫链模型的满足函数进行拟合的结果，并将这一结果与普通BP神经网络拟合的结果进行对比，比较两者的差异。
在概率广播模型中，参数的取值范围为[0, 1]，这里取参数作为训练参数点，在这些参数点上运行对偶路径SMC算法，然后根据第三章权重计算方法，首先分段计算各段样本点的可靠性权重，结果如下图所示：

图16 样本点分段权重示意图
上图中左图为样本点的分布图，右图为各段样本点的可靠性权重。从上述示意图可以看出，每个分段的样本点的相关系数越大，样本点的可靠性权重也相对较大。使用第三章中介绍的训练方法对加权BP神经网络进行训练，并利用训练好的神经网络模型对系统在位置参数点下的模型检测值进行估计，得到如下结果：

图17神经网络拟合满足曲线结果图
上图中左图为神经网络随着训练周期数的增加，其训练误差的变化曲线，可以看出，训练误差在达到30个周期时已经趋于稳定。右图为利用神经网络进行拟合的结果，从拟合结果可以看出，拟合出来的曲线（红色）与真实曲线（绿色）近似想等，进一步的数据显示，平均在0.005以内，满足拟合要求。

第六章 总结与展望
6.1 总结
本文主要研究了带参数的离散时间马尔科夫链模型的模型检测问题。通过分析模型的满足函数的连续性我们将模型检测问题转化为函数拟合问题。本质上我们需要对满足函数进行拟合。为了拟合满足函数，我们使用改进的BP神经网络，为每个样本添加了可靠性权重，并给出了度量可靠性权重的方法。为了估计模型在确定参数下的模型检测值，我们采用统计模型检测方法，并借鉴蒙特卡罗方法中的方差减小技巧，即对偶变量取样，提出了DTMC模型中的对偶状态与对偶路径的概念，并证明了在对状态进行一定规则的重排序的基础上，对偶路径之间的验证结果往往不同，进而得出结论即，对偶路径SMC方法可以有效减小估计值的方差。
我们根据以上算法实现了带参数离散时间马尔科夫链模型的检测工具SpacNN，第四章中分别针对工具的架构，实现原理，关键算法和简单使用做了介绍。
在案例研究阶段，我们研究了概率广播协议，并利用PRISM建立了相应的模型，使用我们在第三章中介绍的方法，我们论证了算法的正确性，改进的SMC算法相对于标准SMC方法的优势以及BP神经网络的拟合效果。

6.2 展望
带参数的模型在现实生活中无处不在，有的不能用离散时间马尔科夫链模型进行建模。目前我们提出的方法只适用于DTMC，后续将研究适用于CTMC乃至更多模型类型的模型检测工具。

参考文献
[1] Lecca, Paola, and C. Priami. "Cell Cycle Control in Eukaryotes: A BioSpi model." Electronic Notes in Theoretical Computer Science180.3(2007):51-63.
[2] Duflot, Marie, et al. "A formal analysis of bluetooth device discovery." International Journal on Software Tools for Technology Transfer8.6(2006):621-632.
[3] Kwiatkowska, Marta, G. Norman, and D. Parker. "Stochastic model checking." International Conference on Formal Methods for PERFORMANCE Evaluation Springer-Verlag, 2007:220-270.
[4] Kwiatkowska, Marta Z., G. Norman, and D. Parker. "Probabilistic Symbolic Model Checking with PRISM: A Hybrid Approach." International Conference on TOOLS and Algorithms for the Construction and Analysis of Systems Springer-Verlag, 2002:52-66.
[5] Bianco, Andrea, and L. D. Alfaro. "Model checking of probabilistic and nondeterministic systems." International Conference on Foundations of Software Technology and Theoretical Computer Science Springer Berlin Heidelberg, 1995:499-513.
[6] 侯刚等. "模型检测中状态爆炸问题研究综述." 计算机科学 40.s1(2013):77-86.
[7] Legay, Axel, B. Delahaye, and S. Bensalem. "Statistical Model Checking: An Overview." 6418.2(2010):122-135.
[8] Sen, Koushik, M. Viswanathan, and G. Agha. Statistical Model Checking of Black-Box Probabilistic Systems. Computer Aided Verification. Springer Berlin Heidelberg, 2004.
[9] Rubinstein, Reuven Y. Simulation and the Monte Carlo Method. Simulation and the Monte Carlo method.. John Wiley & Sons, 2008:167-168.
[10] Nicholas Metropolis, and S. Ulam. "The Monte Carlo Method." Journal of the American Statistical Association 14.1(1971):151-167.
[11] Kwiatkowska, Marta, et al. Symbolic Model Checking for Probabilistic Timed Automata. Formal Techniques, Modelling and Analysis of Timed and Fault-Tolerant Systems. Springer Berlin Heidelberg, 2004:430--440.
[12] Kwiatkowska, Marta, et al. "Symbolic model checking for probabilistic timed automata ☆." Information & Computation 205.7(2007):1027-1077.
[13] Norman, Gethin, and V. Shmatikov. Analysis of Probabilistic Contract Signing. Formal Aspects of Security. Springer Berlin Heidelberg, 2003:81-96.
[14] Aizatulin, Mihhail, H. Schnoor, and T. Wilke. "Computationally Sound Analysis of a Probabilistic Contract Signing Protocol." 5789(2009):571-586.
[15] Islam, S, and M. A. Zaid. "Probabilistic analysis of the ASW protocol using PRISM." Southeastcon IEEE, 2008:159-164.
[16] Lakin, M. R., et al. "Design and analysis of DNA strand displacement devices using probabilistic model checking." Journal of the Royal Society Interface 9.72(2012):1470-1485.
[17] Dannenberg, Frits, et al. DNA Walker Circuits: Computational Potential, Design, and Verification. DNA Computing and Molecular Programming. Springer International Publishing, 2013.
[18] Kwiatkowska, Marta, G. Norman, and D. Parker. "Using probabilistic model checking in systems biology." Acm Sigmetrics Performance Evaluation Review 35.4(2008):14-21.
[19] Brown, Peter F., et al. "The mathematics of statistical machine translation: parameter estimation." Computational Linguistics19.2(1993):263-311.
[20] Tarantola, Albert. "Inverse Problem Theory and Methods for Model Parameter Estimation." Society for Industrial & Applied Mathematics Philadelphia Pa (2005):xii,342.
[21] Nicholas Metropolis, and S. Ulam. "The Monte Carlo Method." Journal of the American Statistical Association 14.1(1971):151-167.
[22] Opper, and Manfred. Advanced mean field methods :. MIT Press, 2001.
[23] Andreychenko, Aleksandr, et al. "Parameter identification for Markov models of biochemical reactions." International Conference on Computer Aided Verification Springer-Verlag, 2011:83-98.
[24] Bortolussi, Luca, et al. "Continuous approximation of collective system behaviour: A tutorial ☆." Performance Evaluation 70.5(2013):317-349.
[25] Dimitriadis, E I, et al. "Parametric Study and Improvement of the Electrical Characteristics of a-SiC/c-Si(p) Based, Thyristor Like Switches, Using Two Dimensional Simulation Techniques." Active & Passive Electronic Components 10.3-4(2015):283-312.
[26] Wang, S. S. J., and M. P. Wand. "Using Infer.NET for Statistical Analyses." American Statistician 65.2(2011):115-126.
[27] Bortolussi, Luca, D. Milios, and G. Sanguinetti. "Smoothed model checking for uncertain Continuous-Time Markov Chains ☆." Information & Computation 247(2016):235-253.
[28] Glasserman, Paul. Monte Carlo Methods in Financial Engineering. Springer, 2004.
[29] Hastings, W. K. "Monte Carlo sampling methods using Markov chains and their applications." Biometrika 57.1(1970):97-109.
[30] Manly, Bryan F. J. Randomization, Bootstrap and Monte Carlo Methods in Biology. Randomization, bootstrap and Monte Carlo methods in biology. Chapman & hall, 1997:856-856.
[31] Gadzhiev, Ch. M. "Checking multivariate model fit from the generalized Wishart-statistic variance." Measurement Techniques 36.12(1993):1316-1319.
[32] Legay, Axel, B. Delahaye, and S. Bensalem. "Statistical Model Checking: An Overview." 6418.2(2010):122-135.
[33] 盛骤. 概率论与数理统计:第三版. 高等教育出版社, 2001.
[34] 徐钟济. 蒙特卡罗方法. 上海科学技术出版社, 1985.
[35] 尹增谦等. "蒙特卡罗方法及应用." 物理与工程 12.3(2002):45-49.
[36] 寻广彬等. "非线性最小二乘跟踪的对偶变量变分方法." 力学学报48.5(2016):1202-1207.
[37] 李晓莉, and 张雅文. 概率论与数理统计. 高等教育出版社, 2014.
[38] Hornik, Kurt, M. Stinchcombe, and H. White. "Multilayer feedforward networks are universal approximators. " Neural Networks 2.5(1989):359-366.
[39] 吴岸城. 神经网络与深度学习. 电子工业出版社, 2016.
[40] 焦李成. 神经网络系统理论. 西安电子科技大学出版社, 1990.

致谢
两年半的研究生活转瞬即逝，纵使有万千的舍不得还是不得不说再见。研究生生活是艰苦的，在第一个学期完成学业之余，便投入了科研之中。从最初的懵懂无知，一头乱撞，到如今的按图索骥，游刃有余，不可以不说是自己的努力加上同学的帮助。尤其是我的导师张敏，她不光教我在课题研究的道路上如何沉着应对，更教我在人生的道路上的许多道理。
我还要感谢同门师兄郭延楠以及师姐吕悦，是你们的帮助和指点迷津，让我的科研的道路上越走越好。
最后，要感谢我的恋人金畅和母亲，是你们朝夕的陪伴让我最终完成了研究生生涯。
















