产生随机路径逻辑：
	涉及到的类：ModulesFile.get_random_path_V2
		循环直到passed_time >= duration
			call next_step(passed_time) return step_instance
			if step_instance.holding_time == 0(e.g. this step is the last step of the path):
				append the step to the path
				restore_system
				return the path
			else:
				append the step to the path
				execute step.next_move_cmd.execAction
				passed_time += step.next_move.holding_time


关于prepare_commands:
	what it dose:
		it iterate all possible values of modulesfile.localVars and set to modulesfile.localVars
		and iterate all commands to see which is enabled and compute its probability. Then using
		tuple([v.value for v in modulesfile.localVars.values()]) as key, store [(cmd, prob)]

	ATTENTION
		由于要提前计算每个cmd的prob，所以在调用 prepare_commands 之前必须设置好所有未设定的参数。


checker与modulesfile的关系: 
    checker调用model的probForPath方法
    checker调用model的q1()
    checker获取model的fb属性
    checker调用model的gen_random_path方法获取随机路径
    所以,checker不会参与修改model底层的数据

manager 中的实验参数设置的设计
    设置训练参数接口
        方法 set_train_constants
        接收数据形式 [(name, val_list)] name 参数名称 val_list 该参数的训练值

        模型运行（prepare_command，计算prob for every command）之类的操作所依赖的参数值保存在BasicParser.vcf_map中
            vcf.map = {name: obj} obj could be Constant/Variable object or function object

    设置测试参数接口
        set_test_x
        接收数据类型 [(vals)] e.g. [(1, 2, 3), (2, 3, 4)] （1,2,3 分别是三个参数的值）
        注意
            这里的参数的顺序必须和设置训练参数时传递的参数的顺序相同


    manager的运行逻辑
        初始化: init BPNegressor, BasicParser etc.
        用户输入模型文件的路径
            read_model_file
                call BasicParser input_file method
                set ModulesFile.DEFAULT_DURATION to model.duration
                init Checker object
        用户输入ltl表达式
            这里的解析还没有做
            set the ltl to checker
        用户输入一批数据用于训练 输入格式 name start step end 

        训练完成

        用户输入单个点 或者一个范围 可以获取模型检测在这个范围内的值
        
        manager.manager_params 用户可以进行设定的参数值 包括 network.nh, no checker.c, d etc 


