产生随机路径逻辑：
	涉及到的类：ModulesFile.get_random_path_V2
		循环直到passed_time >= duration
			call next_step(passed_time) return step_instance
			if step_instance.holding_time == 0(e.g. this step is the last step of the path):
				append the step to the path
				restore_system
				return the path
			else:
				append the step to the path
				execute step.next_move_cmd.execAction
				passed_time += step.next_move.holding_time


关于prepare_commands:
	what it dose:
		it iterate all possible values of modulesfile.localVars and set to modulesfile.localVars
		and iterate all commands to see which is enabled and compute its probability. Then using
		tuple([v.value for v in modulesfile.localVars.values()]) as key, store [(cmd, prob)]

	ATTENTION
		由于要提前计算每个cmd的prob，所以在调用 prepare_commands 之前必须设置好所有未设定的参数。


checker与modulesfile的关系: 
    checker调用model的probForPath方法
    checker调用model的q1()
    checker获取model的fb属性
    checker调用model的gen_random_path方法获取随机路径
    所以,checker不会参与修改model底层的数据


manager 中的实验参数设置的设计
    设置训练参数接口
        方法 set_train_constants
        接收数据形式 [(name, val_list)] name 参数名称 val_list 该参数的训练值

        模型运行（prepare_command，计算prob for every command）之类的操作所依赖的参数值保存在BasicParser.vcf_map中
            vcf.map = {name: obj} obj could be Constant/Variable object or function object

    设置测试参数接口
        set_test_x
        接收数据类型 [(vals)] e.g. [(1, 2, 3), (2, 3, 4)] （1,2,3 分别是三个参数的值）
        注意
            这里的参数的顺序必须和设置训练参数时传递的参数的顺序相同


    manager的运行逻辑
        初始化: init BPNegressor, BasicParser etc.
        用户输入模型文件的路径
            read_model_file
                call BasicParser input_file method
                set ModulesFile.DEFAULT_DURATION to model.duration
                init Checker object
        用户输入ltl表达式
            这里的解析还没有做
            set the ltl to checker
        用户输入一批数据用于训练 输入格式 name start step end 

        训练完成

        用户输入单个点 或者一个范围 可以获取模型检测在这个范围内的值
        
        manager.manager_params 用户可以进行设定的参数值 包括 network.nh, no checker.c, d etc 


打包细则
    sudo pyinstaller --clean -F PATH_TO_MAINUI.PY

系统中的主要模块主要的工作逻辑
    Director 保存用户对UI操作后的函数逻辑(map),内部调manager的函数
    Manager 保存了checker prismparser ltlparser对象,负责模型解析接口,ltl解析接口,以及训练接口.
        系统参数的设置逻辑 在director的option菜单函数中对manager中维护的options map做了更新。manager中的其它函数需要获取某些参数时直接从manager中的map获取即可。

        ltl的解析和设置逻辑 用户输入ltl公式时，不进行任何操作，只有在用户解析train时，才对ltl进行解析，并设置到checker中。
        关于ltl公式 checker使用的ltl公式是一个ltl解析树的层次遍历结果（list, e.g. ["U[1, 10]", "ap1", "ap2"]）。

        训练逻辑
        director中的train逻辑
            1. ltl解析
            首先会遍历主界面widgets，找到ltl的entry,并获取用户输入进行ltl解析操作

            2. 用户输入训练参数
            然后获取模型中不确定的参数名列表，并作为参数，提供输入界面供用户输入，输入格式为"start, step, end"形式的三元组，完成输入后将输入结果保存在manager中。
                训练参数的保存格式多说一句 输入给manager的训练参数是一个map {param_name: [vals]} （在director中进行了转化，interval(start, step, stop)）

            3. 调用manager.train方法

            manager.train函数逻辑
                


关于如何实现sync command
    1. 关于command书写的语法参照prism语言的写法,允许command带上action_name,并且允许同一个module中包含同名command.
       为了实现这一点,module中保存commands的数据结构从OrderedDict改为defaultdict(list),即将同名commands存在一个数组中.
    2. 更改了这一点而后,哪些地方需要进行修改?
        ModulesFile
            add_module

    3. sync的实现
        1. 不同模块之间的同名command要么全部执行,要么全部不执行
        2. 同个模块内部的同名command不进行merge
        设计
            在每次将module添加到ModulesFile的时候进行merge(也符合数据库进行join的实现)
            实际上就是一个join操作.


关于何时使用OrderedDict
    ModulesFile.localVars 需要使用变量的值组成的tuple作为scDict等结构的key,所以需要确保每次遍历的顺序一致.

actions是如何保存的?
    一个actions对应var = expr & var1 = expr1
    底层存储使用字典,key为var, value为function

打包过程中遇到的import matplotlib时的问题 no module named backend_macosx
解决方法是在每个使用matplotlib的程序开始加
import matplotlib
matplotlib.use("TkAgg")
import matplotlib.pyplot as plt